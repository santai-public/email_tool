from abc import ABC, abstractmethod\nfrom typing import List, Dict, Any\n\nclass MailboxStore(ABC):\n    @abstractmethod\n    async def create_mailbox(self, user: str, mailbox_name: str) -> bool:\n        \"\"\"Creates a new mailbox for a given user.\"\"\"\n        pass\n\n    @abstractmethod\n    async def delete_mailbox(self, user: str, mailbox_name: str) -> bool:\n        \"\"\"Deletes an existing mailbox for a given user.\"\"\"\n        pass\n\n    @abstractmethod\n    async def list_mailboxes(self, user: str, pattern: str = '') -> List[str]:\n        \"\"\"Lists mailboxes for a given user, optionally filtered by a pattern.\"\"\"\n        pass\n\n    @abstractmethod\n    async def get_message(self, user: str, mailbox_name: str, uid: int) -> Dict[str, Any]:\n        \"\"\"Retrieves a specific message by UID from a mailbox.\"\"\"\n        pass\n\n    @abstractmethod\n    async def append_message(self, user: str, mailbox_name: str, message_content: bytes, flags: List[str] = None) -> int:\n        \"\"\"Appends a new message to a mailbox, returning its UID.\"\"\"\n        pass\n\n    @abstractmethod\n    async def search_messages(self, user: str, mailbox_name: str, criteria: Dict[str, Any]) -> List[int]:\n        \"\"\"Searches for messages in a mailbox based on criteria, returning UIDs.\"\"\"\n        pass\n\n    @abstractmethod\n    async def update_flags(self, user: str, mailbox_name: str, uids: List[int], flags: List[str], mode: str) -> bool:\n        \"\"\"Updates flags for messages in a mailbox.\"\"\"\n        pass\n\n    @abstractmethod\n    async def get_mailbox_status(self, user: str, mailbox_name: str) -> Dict[str, Any]:\n        \"\"\"Gets status information for a mailbox (e.g., total messages, unseen count).\"\"\"\n        pass\n